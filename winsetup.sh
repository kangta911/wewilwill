#!/bin/bash
set -Eeuo pipefail
# SHOW EVERYTHING
set -x

# ====== CONFIG ======
IMG_URL="https://www.dropbox.com/scl/fi/wozij42y4dsj4begyjwj1/10-lite.img?rlkey=lyb704acrmr1k023b81w3jpsk&st=e3b81z4i&dl=1"
IMG_DIR="/var/lib/libvirt/images"
IMG_FILE="$IMG_DIR/10-lite.img"
RDP_PORT=2025           # host:2025 -> guest:3389
VNC_DISPLAY=":0"        # VNC :0 => tcp/5900
VNC_LISTEN="0.0.0.0"    # cho ph√©p connect t·ª´ ngo√†i (ƒë·∫∑t 127.0.0.1 n·∫øu ch·ªâ local)
VNC_PASS="1234"         # ƒë·ªïi ngay!
VM_NAME="win10lite"
VM_RAM=2048             # MB (tƒÉng ch√∫t cho Windows m∆∞·ª£t h∆°n)
VM_CPU=2

# ====== HELPERS: ch·ªù APT nh·∫£ lock (KH√îNG xo√° lock, KH√îNG ·∫©n output) ======
apt_wait_unlock() {
  local timeout="${1:-180}" waited=0
  local locks=(
    /var/lib/apt/lists/lock
    /var/lib/dpkg/lock
    /var/lib/dpkg/lock-frontend
    /var/cache/apt/archives/lock
  )
  while :; do
    local busy=0
    pgrep -fa 'apt|dpkg|unattended' && busy=1 || true
    for f in "${locks[@]}"; do [[ -e "$f" ]] && { echo "[LOCK] $f"; busy=1; }; done
    (( busy==0 )) && break
    (( waited++ ))
    echo "[WAIT] APT busy ${waited}s/${timeout}s"
    if (( waited>=timeout )); then
      systemctl stop apt-daily.service apt-daily-upgrade.service unattended-upgrades.service || true
      systemctl kill --kill-who=main --signal=TERM apt-daily.service apt-daily-upgrade.service || true
      sleep 5; waited=0
    else
      sleep 1
    fi
  done
}

# ====== PREP ======
if [ "$(id -u)" -eq 0 ]; then SUDO=""; else SUDO="sudo"; fi
$SUDO mkdir -p "$IMG_DIR"
cd "$IMG_DIR"

echo "üü¢ C√†i g√≥i c·∫ßn thi·∫øt..."
if command -v apt-get >/dev/null 2>&1; then
  export DEBIAN_FRONTEND=noninteractive
  apt_wait_unlock 120
  $SUDO dpkg --configure -a || true

  # retry update + install 3 l·∫ßn, KH√îNG ·∫©n output
  for i in 1 2 3; do
    apt_wait_unlock 120
    $SUDO apt-get update -y && \
    $SUDO apt-get install -y qemu-system-x86 qemu-utils wget curl ufw && break
    echo "‚ö†Ô∏è apt-get b·∫≠n/l·ªói (l·∫ßn $i) ‚Äî ch·ªù v√† th·ª≠ l·∫°i..."
    sleep 5
    $SUDO systemctl stop apt-daily.service apt-daily-upgrade.service unattended-upgrades.service || true
  done
elif command -v dnf >/dev/null 2>&1; then
  $SUDO dnf install -y qemu-kvm qemu-img wget curl || true
elif command -v yum >/dev/null 2>&1; then
  $SUDO yum install -y qemu-kvm qemu-img wget curl || true
fi

# Th·ª≠ load KVM (n·∫øu host cho ph√©p)
$SUDO modprobe kvm 2>/dev/null || true
$SUDO modprobe kvm-intel 2>/dev/null || $SUDO modprobe kvm-amd 2>/dev/null || true

# ====== IMAGE ======
if [ ! -f "$IMG_FILE" ]; then
  echo "üü¢ T·∫£i image Windows..."
  wget -O "$IMG_FILE" "$IMG_URL"
else
  echo "üü¢ Image ƒë√£ t·ªìn t·∫°i: $IMG_FILE"
fi

echo "üü¢ Ki·ªÉm tra format image..."
qemu-img info "$IMG_FILE" || true
IMG_FORMAT="$(qemu-img info --output=json "$IMG_FILE" 2>/dev/null | sed -n 's/.*"format": *"\([^"]\+\)".*/\1/p')"
[ -z "${IMG_FORMAT:-}" ] && IMG_FORMAT="raw"
echo "‚û°  Format: $IMG_FORMAT"

# ====== RESIZE (theo ·ªï v·∫≠t l√Ω, ch·ª´a 2GB) ======
if lsblk | grep -q '^vda'; then DEV_DISK="/dev/vda"; else DEV_DISK="/dev/sda"; fi
if [ -b "$DEV_DISK" ]; then
  DISK_SIZE=$(lsblk -b -d -n -o SIZE "$DEV_DISK")
  DISK_SIZE_GB=$((DISK_SIZE/1024/1024/1024))
  if [ $DISK_SIZE_GB -gt 10 ]; then
    TARGET_SIZE="$((DISK_SIZE_GB - 2))G"
  else
    TARGET_SIZE="${DISK_SIZE_GB}G"
  fi
  echo "üü¢ Resize image l√™n $TARGET_SIZE (·ªï th·∫≠t: ${DISK_SIZE_GB}GB)..."
  qemu-img resize -f "$IMG_FORMAT" "$IMG_FILE" "$TARGET_SIZE"
else
  echo "‚ö†Ô∏è  Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ·ªï v·∫≠t l√Ω, b·ªè qua resize."
fi

# ====== FIREWALL & PORTS ======
# M·ªü port host cho RDP v√† VNC (gi·ªØ nguy√™n nh∆∞ g·ªëc)
if command -v ufw >/dev/null 2>&1; then
  $SUDO ufw allow ${RDP_PORT}/tcp || true
  $SUDO ufw allow 5900/tcp || true
fi
if command -v iptables >/dev/null 2>&1; then
  $SUDO iptables -I INPUT -p tcp --dport "$RDP_PORT" -j ACCEPT || true
  $SUDO iptables -I INPUT -p tcp --dport 5900 -j ACCEPT || true
fi

# Ki·ªÉm tra xung ƒë·ªôt port
if ss -lnt | awk '{print $4}' | grep -q ":${RDP_PORT}$"; then
  echo "‚úÖ Host ƒëang l·∫Øng nghe port RDP ${RDP_PORT} (s·∫Ω d√πng cho forward)."
fi
if ss -lnt | awk '{print $4}' | grep -q ":5900$"; then
  echo "‚ö†Ô∏è  Port VNC 5900 ƒëang b·∫≠n. ƒê·ªïi VNC_DISPLAY sang :1 (5901) r·ªìi ch·∫°y l·∫°i."
  exit 1
fi

# ====== RUN ======
echo "üü¢ Kh·ªüi ƒë·ªông VM (auto ch·ªçn KVM/TCG)..."
if [ -e /dev/kvm ]; then
  ACCEL="-enable-kvm -cpu host"
  echo "‚û°  D√πng KVM (/dev/kvm c√≥ s·∫µn)."
else
  ACCEL="-accel tcg,thread=multi -cpu max"
  echo "‚û°  Kh√¥ng c√≥ /dev/kvm ‚áí d√πng TCG (ch·∫≠m h∆°n)."
fi

# Thi·∫øt l·∫≠p VNC password t·∫°m b·∫±ng monitor (gi·ªØ ƒë√∫ng nh∆∞ g·ªëc)
MON_SOCK="/tmp/${VM_NAME}.mon"
[ -S "$MON_SOCK" ] && rm -f "$MON_SOCK"

# In nguy√™n l·ªánh QEMU ra tr∆∞·ªõc
echo qemu-system-x86_64 \
  $ACCEL -smp "$VM_CPU" -m "$VM_RAM" \
  -name "$VM_NAME" \
  -rtc base=localtime \
  -drive file="$IMG_FILE",format="$IMG_FORMAT",if=ide,cache=none,aio=threads \
  -netdev user,id=n1,hostfwd=tcp::${RDP_PORT}-:3389 \
  -device e1000,netdev=n1 \
  -usb -device usb-tablet \
  -display vnc=${VNC_LISTEN}${VNC_DISPLAY} \
  -monitor unix:${MON_SOCK},server,nowait \
  -daemonize

qemu-system-x86_64 \
  $ACCEL -smp "$VM_CPU" -m "$VM_RAM" \
  -name "$VM_NAME" \
  -rtc base=localtime \
  -drive file="$IMG_FILE",format="$IMG_FORMAT",if=ide,cache=none,aio=threads \
  -netdev user,id=n1,hostfwd=tcp::${RDP_PORT}-:3389 \
  -device e1000,netdev=n1 \
  -usb -device usb-tablet \
  -display vnc=${VNC_LISTEN}${VNC_DISPLAY} \
  -monitor unix:${MON_SOCK},server,nowait \
  -daemonize

# ƒê·∫∑t VNC password qua monitor (gi·ªØ nguy√™n, hi·ªán full output)
sleep 1
if [ -S "$MON_SOCK" ]; then
  {
    echo "change vnc password"
    echo "${VNC_PASS}"
    echo "quit"
  } | socat - UNIX-CONNECT:${MON_SOCK} || true
fi

echo "‚úÖ VM ƒë√£ kh·ªüi ch·∫°y n·ªÅn."
echo "üîå VNC: ${VNC_LISTEN}${VNC_DISPLAY} (TCP $(expr 5900 + ${VNC_DISPLAY#:}))  | Password: ${VNC_PASS}"
echo "üîÅ RDP forward: host:${RDP_PORT} -> guest:3389"
echo "‚ÑπÔ∏è  D√πng:  vncviewer ${VNC_LISTEN}${VNC_DISPLAY}"
echo "    Ho·∫∑c:  vncviewer <IP_HOST>:$(expr 5900 + ${VNC_DISPLAY#:})"
echo "    RDP sau khi b·∫≠t trong Windows:  mstsc /v:<IP_HOST>:${RDP_PORT}"
